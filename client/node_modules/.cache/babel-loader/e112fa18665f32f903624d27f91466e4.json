{"ast":null,"code":"var _jsxFileName = \"C:\\\\code\\\\laravel\\\\light-bootstrap-dashboard-react-master\\\\src\\\\views\\\\UserProfile.jsx\";\nimport { Card } from \"components/Card/Card.jsx\";\nimport { FormInputs } from \"components/FormInputs/FormInputs.jsx\";\nimport { UserCard } from \"components/UserCard/UserCard.jsx\";\nimport Button from \"components/CustomButton/CustomButton.jsx\";\nimport Timeline2 from \"./Timeline2.jsx\";\nimport React, { Component } from \"react\";\nimport \"../assets/css/timeline.css\";\nimport { Grid, Row, Col, FormGroup, ControlLabel, FormControl } from \"react-bootstrap\"; //auth\n\nimport { getProfile } from '../components/Auth/UserFunctions';\nimport { update } from '../components/Auth/UserFunctions';\n\nclass UserProfile extends Component {\n  constructor() {\n    super();\n    this.state = {\n      name: '',\n      email: '',\n      address: '',\n      city: '',\n      country: '',\n      birthday: '',\n      about: '',\n      errors: {}\n    };\n    this.onChange = this.onChange.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n  }\n\n  componentDidMount() {\n    getProfile().then(res => {\n      if (res == null) {\n        window.location.href = \"/\";\n      } else {\n        this.setState({\n          name: res.user.name,\n          email: res.user.email,\n          password: this.state.password,\n          pwconfirm: this.state.pwconfirm,\n          address: res.user.address,\n          city: res.user.city,\n          country: res.user.country,\n          birthday: res.user.birthday,\n          about: res.user.about\n        });\n      }\n    });\n  }\n\n  onChange(e) {\n    this.setState({\n      [e.target.name]: e.target.value\n    });\n  }\n\n  onSubmit(e) {\n    e.preventDefault(); //validator\n\n    if (this.state.password != this.state.pwconfirm) {\n      alert('비밀번호가 맞지않습니다. 다시 확인하세요');\n    } else {\n      const user = {\n        name: this.state.name,\n        email: this.state.email,\n        password: this.state.password,\n        pwconfirm: this.state.pwconfirm,\n        address: this.state.address,\n        city: this.state.city,\n        country: this.state.country,\n        about: this.state.about,\n        birthday: this.state.birthday\n      };\n      console.log('tetstestes', user);\n      update(user).then(res => {\n        if (res) {\n          console.log('업데이트 됐나??', res);\n          this.props.history.push(\"/user\");\n        }\n      });\n    }\n  }\n\n  more(e) {\n    e.preventDefault();\n    var DrawLine = DrawLine || {}; // NameSpace\n\n    DrawLine.CNT_BUFF = 1; // 매끄러운 매칭을 위한 버퍼 포인트 개수\n\n    DrawLine.SPLIT_VALUE = 20; // Road API 로 한번에 요청할 포인트 개수. 최대 100개 까지 가능  ex)샘플코드에서는 SPLIT_VALUE 를 10으로 가정했을 때 요청 포인트 개수가 총 25개라면 API 가 3번 호출됨\n\n    DrawLine.REQ_LIMIT_PER_SEC = 1; // API 초당 요청 제한건수\n\n    DrawLine.map = null; // 이동한도로찾기 API 사용전 라인 표출할 지도\n\n    DrawLine.map2 = null; // 이동한도로찾기 API 사용후 라인 표출할 지도\n\n    DrawLine.vectorLayer = null; // 이동한도로찾기 API 사용전 벡터 레이어\n\n    DrawLine.vectorLayer2 = null; // 이동한도로찾기 API 사용후 벡터 레이어\n\n    DrawLine.arrPoint = null; // 포인트 배열 (resource)\n\n    DrawLine.totDistance = 0; // 매칭된 거리 (단위: m)\n\n    DrawLine.totPointCount = 0; // 매칭된 좌표의 개수 (단위: count)\n\n    DrawLine.arrMatchedId = []; // 매칭된 링크 아이디 (중복제거)\n\n    DrawLine.currentIndex = 0;\n    DrawLine.startSourceIndex = 0; // 버퍼 포인트(이전 포인트의 일부를 포함하여 요청)를 제외한 실제 포인트 시작 인덱스\n\n    DrawLine.cntReqApi = 0; // API 요청횟수\n\n    DrawLine.lastMatchedLocation = null; // 이전 마지막 포인트를 저장( 이후 포인트와 연결하기 위함 )\n\n    DrawLine.vector_layer = null; // 요청 좌표를 표시할 레이어(매칭 전 지도에 표시)\n\n    DrawLine.markerLayer = null; // 보간점 레이어\n\n    DrawLine.marker = null; // 보간점 마커 \n\n    /**\r\n    * 문서 로드 완료시 작업\r\n    */\n\n    $(function () {\n      DrawLine.initMap(); // 지도 그리기\n\n      DrawLine.initData(); // 포인트 데이터 초기화\n\n      DrawLine.setMapBound(); // 포인트에 따른 지도 바운드 설정\n\n      if (DrawLine.isValidate()) {\n        // 유효성 검사를 통과 했다면 할 작업\n        DrawLine.log(\"- LoadApi 요청 작업 시작 -\");\n        DrawLine.log('------------------------------------------');\n        setTimeout(function () {\n          // 지도를 띄우고 API 를 호출하기 위해 딜레이 줌\n          DrawLine.splitPoint(); // 포인트 데이터 나눠서 요청하기 ( LoadApi 한번에 요청 가능한 개수 100개 제한 )\n        }, 1000);\n      }\n    });\n    /**\r\n    * 유효성검사 \r\n    */\n\n    DrawLine.isValidate = function () {\n      if (DrawLine.arrPoint.length <= DrawLine.CNT_BUFF * 2 || DrawLine.SPLIT_VALUE <= DrawLine.CNT_BUFF || DrawLine.SPLIT_VALUE > 100) {\n        alert(\"리소스 포인트 데이터 개수는 버퍼크기 초과여야 하고, \\'DrawLine.SPLIT_VALUE\\' 는 버퍼 크기 초과 100 이하 여야 합니다.\");\n        return false;\n      }\n\n      return true;\n    };\n    /**\r\n     \t\t* 지도 초기화\r\n     \t\t*/\n\n\n    DrawLine.initMap = function () {\n      //이동한도로찾기 API 사용전 지도 생성\n      DrawLine.map = new Tmapv2.Map(\"map_div\", {\n        width: \"70%\",\n        height: \"350px\",\n        zoomControl: true,\n        scrollwheel: true\n      }); //이동한도로찾기 API 사용할 지도 생성\n\n      DrawLine.map2 = new Tmapv2.Map(\"map_div2\", {\n        width: \"70%\",\n        height: \"350px\",\n        zoomControl: true,\n        scrollwheel: true\n      });\n      var agent = navigator.userAgent.toLowerCase();\n    };\n    /**\r\n    * 포인트 개수 나누기 ( LoadApi request limit 100 )\r\n    */\n\n\n    DrawLine.splitPoint = function () {\n      var cntAllPoint = DrawLine.arrPoint.length; // 포인트 배열 갯수 구하기\n\n      var pointString = \"\"; // LoadApi 에 요청할 포인트 스트링\n\n      var arrMatchedPoint = {}; // response 결과\n\n      var i,\n          j,\n          k,\n          cntPointString = 0;\n\n      for (i = DrawLine.currentIndex; i < cntAllPoint; i += 2) {\n        // 포인트 스트링 만들기\n        // 경도와 위도 사이는 ‘,’ 좌표와 좌표 사이는 ‘|’ 로 구분 지어 요청 합니다.\n        if (pointString != \"\") {\n          pointString += '|';\n        }\n\n        pointString += DrawLine.arrPoint[i] + ',' + DrawLine.arrPoint[i + 1]; // ex) 127.925710,37.557086|127.954464,37.556542\n\n        cntPointString++; // 포인트 스트링 개수 카운트\n\n        var coord = new Tmapv2.LatLng(DrawLine.arrPoint[i + 1], DrawLine.arrPoint[i]);\n        var circle = new Tmapv2.Circle({\n          // 원 생성\n          center: coord,\n          radius: 20,\n          fillColor: \"#000000\",\n          fillOpacity: 0.2,\n          strokeColor: \"#000000\",\n          strokeWeight: 1,\n          map: DrawLine.map\n        });\n        var circle2 = new Tmapv2.Circle({\n          // 원 생성2\n          center: coord,\n          radius: 20,\n          fillColor: \"#FF0000\",\n          fillOpacity: 0.2,\n          strokeColor: \"#000000\",\n          strokeWeight: 1,\n          map: DrawLine.map2\n        });\n\n        if (cntPointString == DrawLine.SPLIT_VALUE || i + 2 >= cntAllPoint) {\n          // 포인트 개수가 제한 수에 도달했다면 || 반복문의 마지막 항목 이라면 할 작업 \n          // 0. LoadApi 요청\n          DrawLine.reqLoadApi(pointString, function (response) {\n            DrawLine.cntReqApi++; // API 요청횟수 카운트\n            // LoadApi Response 받은 후 작업\n\n            var matchedId = \"\"; // 매칭된 아이디\n\n            var objNextMatchedLocation = {}; // 바로 직전에 매칭된 좌표\n\n            var objSourceLocation = {}; // 요청한 좌표\n\n            var lastSourceIndex = -1; // 요청 포인트 인덱스 번호\n\n            var arrPointForLine = []; // 선으로 그려질 포인트\n\n            var arrPointForMarker = []; // 마커로 그려질 포인트\n\n            var arrPointForCalDistance = []; // 거리 계산을 위한 포인트\n            // 결과 값이 존재한다면 실행할 작업\n\n            if (response && response.resultData.matchedPoints) {\n              arrMatchedPoint = response.resultData.matchedPoints; // 매칭된 정보 데이터(matchedPoints)를 arrMatchedPoint 배열에 담는다.\n\n              for (j = 0; j < arrMatchedPoint.length; j++) {\n                objMatchedLocation = arrMatchedPoint[j].matchedLocation;\n                objSourceLocation = arrMatchedPoint[j].sourceLocation; // 1. 매칭 아이디 추가 (중복제거)\n                //----------------------------------------------------------------\n\n                matchedId = arrMatchedPoint[j].linkId + \"_\" + arrMatchedPoint[j].idxName;\n\n                for (k = 0; k < DrawLine.arrMatchedId.length; k++) {\n                  if (DrawLine.arrMatchedId[k] == matchedId) {\n                    break;\n                  }\n                }\n\n                if (k >= DrawLine.arrMatchedId.length) {\n                  // 중복된 아이디가 존재하지 않는다면 할 작업\n                  DrawLine.arrMatchedId.push(matchedId); // 매칭된 아이디 목록에 추가\n                } //----------------------------------------------------------------\n\n\n                if (arrMatchedPoint[j].sourceIndex >= 0) {\n                  // sourceIndex 가 존재한다면 마지막 sourceIndex 갱신\n                  lastSourceIndex = arrMatchedPoint[j].sourceIndex;\n                } // 2-1. 라인으로 그려질 소스 포인트 리스트 만들기\n\n\n                if (objSourceLocation) {\n                  arrPointForMarker.push(new Tmapv2.LatLng(objSourceLocation.latitude, objSourceLocation.longitude)); // 좌표변환\n                } // 3-1. 라인으로 그려질 매칭 포인트 리스트 만들기\n                // 한번에 모든 좌표를 요청하면 문제가 없겠지만 100개 이상의 좌표를 여러번 나눠서 요청해야할 경우 요청과 요청 사이의 매칭된 링크가 어긋날 수 있다.\n                // 이를 보정하기 위해 이전 요청 좌표의 일부(버퍼)를 함깨 요청하고 매 요청의 곂치는 부분의 결과를 (버퍼사이즈/2 만큼)덜 그림으로써 좀더 매끄러운 결과를 얻을 수 있다.\n\n\n                if (arrPointForLine.length == 0 && DrawLine.lastMatchedLocation) {\n                  // 이전 요청의 마지막 매칭좌표가 존재한다면 현재 매칭 좌표라인의 맨 앞에 추가 ( 이전 요청 라인과 이어지게 하기 위함 )\n                  arrPointForLine.push(new Tmapv2.LatLng(DrawLine.lastMatchedLocation.latitude, DrawLine.lastMatchedLocation.longitude)); // 좌표변환\n\n                  arrPointForCalDistance.push(DrawLine.lastMatchedLocation); // 거리 계산을 위해 저장\n\n                  DrawLine.lastMatchedLocation = null;\n                }\n\n                if (cntAllPoint / 2 <= DrawLine.SPLIT_VALUE) {\n                  // 1) 처음이자 마지막 요청이라면(전체 요청 좌표개수가 분할요청 기준보다 적다면) => 매칭된 좌표를 모두 라인으로 그림\n                  if (objMatchedLocation) {\n                    arrPointForLine.push(new Tmapv2.LatLng(objMatchedLocation.latitude, objMatchedLocation.longitude)); // 좌표변환\n\n                    arrPointForCalDistance.push(objMatchedLocation); // 거리 계산을 위해 저장\n                  }\n                } else if (DrawLine.cntReqApi == 1) {\n                  // 2) 처음 요청이면서 이후에 요청이 있을 예정이라면 => 뒤쪽좌표 중 버퍼의 절반 만큼 그리지 않음\n                  if (objMatchedLocation && lastSourceIndex < cntPointString - DrawLine.CNT_BUFF / 2) {\n                    arrPointForLine.push(new Tmapv2.LatLng(objMatchedLocation.latitude, objMatchedLocation.longitude)); // 좌표변환\n\n                    DrawLine.lastMatchedLocation = objMatchedLocation; // 이후 API 요청결과와 라인을 이어가기 위해 마지막 포인트 저장\n\n                    arrPointForCalDistance.push(objMatchedLocation); // 거리 계산을 위해 저장\n                  }\n                } else if (DrawLine.cntReqApi > 1 && i + 2 >= cntAllPoint) {\n                  // 3) 처음이 아니면서 마지막 API 요청이라면 => 앞쪽좌표 중 버퍼의 절반 만큼 그리지 않음\n                  if (objMatchedLocation && lastSourceIndex >= DrawLine.CNT_BUFF / 2) {\n                    arrPointForLine.push(new Tmapv2.LatLng(objMatchedLocation.latitude, objMatchedLocation.longitude)); // 좌표변환\n\n                    DrawLine.lastMatchedLocation = objMatchedLocation; // 이후 API 요청결과와 라인을 이어가기 위해 마지막 포인트 저장\n\n                    arrPointForCalDistance.push(objMatchedLocation); // 거리 계산을 위해 저장\n                  }\n                } else if (DrawLine.cntReqApi > 1) {\n                  // 4) 처음이 아니면서 이후에 API 요청이 있을 예정이라면 => 앞쪽좌표 중 버퍼의 절반, 뒤쪽좌표 중 버퍼의 절반 만큼 그리지 않음\n                  if (objMatchedLocation && lastSourceIndex >= DrawLine.CNT_BUFF / 2 && lastSourceIndex < cntPointString - DrawLine.CNT_BUFF / 2) {\n                    arrPointForLine.push(new Tmapv2.LatLng(objMatchedLocation.latitude, objMatchedLocation.longitude)); // 좌표변환\n\n                    DrawLine.lastMatchedLocation = objMatchedLocation; // 이후 API 요청결과와 라인을 이어가기 위해 마지막 포인트 저장\n\n                    arrPointForCalDistance.push(objMatchedLocation); // 거리 계산을 위해 저장\n                  }\n                }\n              } // 2-2. 소스 포인트 리스트로 라인 그리기\n              // 요청한 좌표를 사용해 라인을 그려줍니다.(빨간색)\n\n\n              DrawLine.drawLine(arrPointForMarker, \"#FF0000\"); // 3-2. 매칭 포인트 리스트로 라인 그리기\n              // 요청한 좌표와 매칭되는 좌표를 사용해 라인을 그려줍니다.(파랑색)\n\n              DrawLine.drawLine(arrPointForLine, \"#0000FF\"); // 4. 매칭된 좌표의 거리 구하기\n\n              for (k = 0; k < arrPointForCalDistance.length - 1; k++) {\n                DrawLine.totDistance += DrawLine.calDistance(arrPointForCalDistance[k].longitude, arrPointForCalDistance[k].latitude, arrPointForCalDistance[k + 1].longitude, arrPointForCalDistance[k + 1].latitude);\n              } // 5. 매칭된 좌표의 개수 구하기\n\n\n              DrawLine.totPointCount += arrPointForCalDistance.length;\n\n              if (DrawLine.cntReqApi > 1 && arrPointForCalDistance.length >= 1) {\n                // 첫 요청이 아니면서(앞서 요청한 API 의 마지막 좌표가 포함되어 있으면서), 매칭된 포인트가 1개 이상이라면  카운트 1개 뺌\n                DrawLine.totPointCount--;\n              } // 거리 계산용 포인트 리스트 초기화\n\n\n              arrPointForCalDistance = [];\n            }\n          });\n\n          if (i + 2 < cntAllPoint) {\n            // 마지막 항목이 아니라면 버퍼 포인트 추가\n            pointString = \"\"; // LoadAPI 의 파라미터 초기화\n\n            cntPointString = 0; // 포인트 스트링 개수 초기화(LoadAPI 에 포인트 분할 요청을 위한 카운트)\n\n            i -= DrawLine.CNT_BUFF * 2; // 매끄러운 링크 매칭을 위해 이전 일부 포인트를 포함한 매칭을 한다. (매칭 버퍼)\n\n            DrawLine.startSourceIndex = DrawLine.CNT_BUFF; // 매칭 버퍼 포인트를 제외하고 매칭 좌표 수를 카운트 하기 위한 변수\n          }\n\n          DrawLine.currentIndex = i;\n          DrawLine.log(\"총 거리 : \" + DrawLine.totDistance.toFixed(2) + \"m\");\n          DrawLine.log(\"매칭된 링크의 개수 : \" + DrawLine.arrMatchedId.length + \"개\");\n          DrawLine.log(\"총 좌표의 개수 : \" + DrawLine.totPointCount + \"개\");\n          DrawLine.log('------------------------------------------'); // 중간 진행과정을 화면에 표출하기 위한 작업\n\n          if (i + 2 < cntAllPoint) {\n            DrawLine.currentIndex += 2; // 포인트 이동\n\n            setTimeout(DrawLine.splitPoint, 1000 / DrawLine.REQ_LIMIT_PER_SEC); // 재귀호출\n\n            break;\n          } else {\n            DrawLine.log(\"- LoadApi 요청 작업 완료 -\");\n          }\n        }\n      }\n    };\n    /**\r\n     \t\t* 라인 그리기\r\n     \t\t*/\n\n\n    DrawLine.drawLine = function (pointList, lineColor) {\n      var polyline_;\n\n      if (lineColor == \"#FF0000\") {\n        polyline_ = new Tmapv2.Polyline({\n          path: pointList,\n          strokeColor: lineColor,\n          strokeWeight: 6,\n          map: DrawLine.map\n        });\n      } else {\n        // 지도상에 그려질 스타일을 설정합니다.\n        polyline_ = new Tmapv2.Polyline({\n          path: pointList,\n          strokeColor: lineColor,\n          strokeWeight: 6,\n          map: DrawLine.map2\n        });\n      }\n    };\n    /**\r\n     \t\t* 로드 매칭 API 요청\r\n     \t\t*/\n\n\n    DrawLine.reqLoadApi = function (pointString, callback) {\n      var url = 'https://apis.openapi.sk.com/tmap/road/matchToRoads?version=1&appKey=l7xx49ec35203c51459ab998a98895d8d47c'; // 이동한 도로 찾기 api 요청 url입니다.\n\n      $.ajax({\n        type: 'POST',\n        contentType: \"application/x-www-form-urlencoded\",\n        url: url,\n        data: {\n          \"responseType\": \"1\",\n          // 1:전체 데이터 요청, 2:요청좌표 및 매치된 좌표를 제외한 데이터 요청\n          \"coords\": pointString // 좌표계는 WGS84GEO, 매핑에 사용될 좌표 목록입니다.  경도와 위도 사이는 \",\" 좌표와 좌표 사이에는 \"|\"로 구분지어 요청합니다. \n\n        },\n        async: false,\n        success: function (data) {\n          callback(data);\n        }\n      });\n    };\n    /**\r\n    * 좌표가 한눈에 들어오는 바운드 찾기\r\n    */\n\n\n    DrawLine.setMapBound = function () {\n      var positionBounds = new Tmapv2.LatLngBounds(); // bounds 인스턴스를 생성합니다.\n\n      var i;\n\n      for (i = 0; i < DrawLine.arrPoint.length; i += 2) {\n        // 포인트 배열 (resource)의 길이만큼 반복\n        // 좌표변환 후 bounds 확장\n        var boundPosition = new Tmapv2.LatLng(DrawLine.arrPoint[i + 1], DrawLine.arrPoint[i]);\n        positionBounds.extend(boundPosition);\n      }\n\n      DrawLine.map.panToBounds(positionBounds); // 매칭전 좌표가 한눈에 들어올 수 있는 지도 중심과 줌레벨 설정\n\n      DrawLine.map2.panToBounds(positionBounds); // 매칭후 좌표가 한눈에 들어올 수 있는 지도 중심과 줌레벨 설정\n    };\n    /**\r\n    * 로그 표시\r\n    */\n\n\n    DrawLine.log = function (msg) {\n      $('#divResult').html($('#divResult').html() + msg + \"<br/>\");\n      $(\"#divResult\").scrollTop($(\"#divResult\")[0].scrollHeight); // 스크롤 맨 아래로 이동\n    };\n    /**\r\n    * 위경도로 거리 구하기\r\n    */\n\n\n    DrawLine.calDistance = function (lon1, lat1, lon2, lat2) {\n      var theta, dist;\n      if (lon1 == lon2 && lat1 == lat2) return 0;\n      theta = lon1 - lon2;\n      dist = Math.sin(DrawLine.deg2rad(lat1)) * Math.sin(DrawLine.deg2rad(lat2)) + Math.cos(DrawLine.deg2rad(lat1)) * Math.cos(DrawLine.deg2rad(lat2)) * Math.cos(DrawLine.deg2rad(theta));\n      dist = Math.acos(dist);\n      dist = DrawLine.rad2deg(dist);\n      dist = dist * 60 * 1.1515;\n      dist = dist * 1.609344; // 단위 mile 에서 km 변환\n\n      dist = dist * 1000.0; // 단위  km 에서 m 로 변환\n\n      return Number(Number(dist).toFixed(2));\n    };\n    /**\r\n    * 주어진 도(degree) 값을 라디언으로 변환\r\n    */\n\n\n    DrawLine.deg2rad = function (deg) {\n      return deg * Math.PI / 180;\n    };\n    /**\r\n    * 주어진 라디언(radian) 값을 도(degree) 값으로 변환\r\n    */\n\n\n    DrawLine.rad2deg = function (rad) {\n      return rad * 180 / Math.PI;\n    };\n    /*\r\n    * 이동한도로찾기 요청시 1회 좌표 100개까지 지원가능합니다. \r\n     \t\t*/\n\n    /*포인트 배열 초기화*/\n\n\n    DrawLine.initData = function () {\n      DrawLine.arrPoint = [128.62097089126576, 35.89315725638313, 128.6221513571504, 35.892643447504284, 128.62245966742682, 35.89249624765208, 128.6232068338938, 35.89213519124339];\n    };\n  }\n\n  render() {\n    let str = this.state.name;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 472,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      fluid: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 473,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 474,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 8,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 475,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      title: \"Edit Profile\",\n      content: /*#__PURE__*/React.createElement(\"form\", {\n        onSubmit: this.onSubmit,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 479,\n          columnNumber: 19\n        }\n      }, /*#__PURE__*/React.createElement(FormInputs, {\n        ncols: [\"col-md-5\", \"col-md-7\"],\n        properties: [{\n          label: \"Username\",\n          type: \"text\",\n          bsClass: \"form-control\",\n          placeholder: \"Username\",\n          defaultValue: this.state.name,\n          onChange: this.onChange\n        }, {\n          label: \"Email address\",\n          type: \"email\",\n          bsClass: \"form-control\",\n          placeholder: \"email\",\n          defaultValue: this.state.email,\n          onChange: this.onChange\n        }],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 481,\n          columnNumber: 21\n        }\n      }), /*#__PURE__*/React.createElement(FormInputs, {\n        ncols: [\"col-md-6\", \"col-md-6\"],\n        properties: [{\n          label: \"Password\",\n          type: \"password\",\n          name: \"password\",\n          bsClass: \"form-control\",\n          placeholder: \"Password\",\n          value: this.state.password,\n          onChange: this.onChange\n        }, {\n          label: \"Password confirm\",\n          type: \"password\",\n          name: \"pwconfirm\",\n          bsClass: \"form-control\",\n          placeholder: \"Password confirm\",\n          value: this.state.pwconfirm,\n          onChange: this.onChange\n        }],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 503,\n          columnNumber: 21\n        }\n      }), /*#__PURE__*/React.createElement(FormInputs, {\n        ncols: [\"col-md-12\"],\n        properties: [{\n          label: \"address\",\n          type: \"text\",\n          bsClass: \"form-control\",\n          placeholder: \"Home address\",\n          defaultValue: this.state.address,\n          onChange: this.onChange\n        }],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 527,\n          columnNumber: 21\n        }\n      }), /*#__PURE__*/React.createElement(FormInputs, {\n        ncols: [\"col-md-6\", \"col-md-6\"],\n        properties: [{\n          label: \"City\",\n          type: \"text\",\n          bsClass: \"form-control\",\n          placeholder: \"City\",\n          defaultValue: this.state.city,\n          onChange: this.onChange\n        }, {\n          label: \"Country\",\n          type: \"text\",\n          bsClass: \"form-control\",\n          placeholder: \"Country\",\n          defaultValue: this.state.country,\n          onChange: this.onChange\n        }],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 540,\n          columnNumber: 21\n        }\n      }), /*#__PURE__*/React.createElement(FormInputs, {\n        ncols: [\"col-md-8\"],\n        properties: [{\n          label: \"Birthday\",\n          type: \"date\",\n          bsClass: \"form-control\",\n          placeholder: \"Country\",\n          defaultValue: this.state.birthday,\n          onChange: this.onChange\n        }],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 561,\n          columnNumber: 21\n        }\n      }), /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 574,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        md: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 575,\n          columnNumber: 23\n        }\n      }, /*#__PURE__*/React.createElement(FormGroup, {\n        controlId: \"formControlsTextarea\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 576,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(ControlLabel, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 577,\n          columnNumber: 27\n        }\n      }, \"About Me\"), /*#__PURE__*/React.createElement(FormControl, {\n        rows: \"5\",\n        componentClass: \"textarea\",\n        bsClass: \"form-control\",\n        placeholder: \"Here can be your description\",\n        value: this.state.about,\n        onChange: this.onChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 578,\n          columnNumber: 27\n        }\n      })))), /*#__PURE__*/React.createElement(Button, {\n        bsStyle: \"info\",\n        pullRight: true,\n        fill: true,\n        type: \"submit\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 589,\n          columnNumber: 21\n        }\n      }, \"Update Profile\"), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"clearfix\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 592,\n          columnNumber: 21\n        }\n      })),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 476,\n        columnNumber: 15\n      }\n    })), /*#__PURE__*/React.createElement(Col, {\n      md: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 597,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(UserCard, {\n      bgImage: \"https://ununsplash.imgix.net/photo-1431578500526-4d9613015464?fit=crop&fm=jpg&h=300&q=75&w=400\",\n      avatar: \"https://t1.daumcdn.net/cfile/tistory/243FE450575F82662D\",\n      name: this.state.name,\n      userName: this.state.email,\n      description: /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 604,\n          columnNumber: 19\n        }\n      }, /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 605,\n          columnNumber: 21\n        }\n      }), this.state.about),\n      socials: /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 610,\n          columnNumber: 19\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        simple: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 611,\n          columnNumber: 21\n        }\n      }, \"Timeline\")),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 598,\n        columnNumber: 15\n      }\n    })))), /*#__PURE__*/React.createElement(\"hr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 623,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      class: \"row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 624,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      class: \"col-md-12\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 625,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      class: \"page-header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 626,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 627,\n        columnNumber: 13\n      }\n    }, \"timeline\")), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 629,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"ul\", {\n      class: \"timeline timeline-horizontal\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 630,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"li\", {\n      class: \"timeline-item\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 631,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      class: \"timeline-badge primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 632,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"i\", {\n      class: \"glyphicon glyphicon-check\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 632,\n        columnNumber: 51\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      class: \"timeline-panel\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 633,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      class: \"timeline-heading\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 634,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      class: \"timeline-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 635,\n        columnNumber: 19\n      }\n    }, \"\\uCCAD\\uB2F4\\uBA74\\uC625 \\uBCF5\\uD604\\uC810\")), /*#__PURE__*/React.createElement(\"div\", {\n      class: \"timeline-body\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 637,\n        columnNumber: 17\n      }\n    }))), /*#__PURE__*/React.createElement(\"li\", {\n      class: \"timeline-item\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 641,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      class: \"timeline-badge success\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 642,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"i\", {\n      class: \"glyphicon glyphicon-check\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 642,\n        columnNumber: 51\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      class: \"timeline-panel\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 643,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      class: \"timeline-heading\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 644,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      class: \"timeline-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 645,\n        columnNumber: 19\n      }\n    }, \"\\uD55C\\uC62C\\uBBF8\\uC6A9\\uC2E4\")), /*#__PURE__*/React.createElement(\"div\", {\n      class: \"timeline-body\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 647,\n        columnNumber: 17\n      }\n    }))), /*#__PURE__*/React.createElement(\"li\", {\n      class: \"timeline-item\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 651,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      class: \"timeline-badge info\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 652,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"i\", {\n      class: \"glyphicon glyphicon-check\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 652,\n        columnNumber: 48\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      class: \"timeline-panel\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 653,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      class: \"timeline-heading\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 654,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      class: \"timeline-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 655,\n        columnNumber: 19\n      }\n    }, \"\\uD6FC\\uBBF8\\uB9AC\\uB9C8\\uD2B8 \\uBCF5\\uD604\\uC2AC\\uAE30\\uC810\")), /*#__PURE__*/React.createElement(\"div\", {\n      class: \"timeline-body\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 657,\n        columnNumber: 17\n      }\n    }))), /*#__PURE__*/React.createElement(\"li\", {\n      class: \"timeline-item\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 661,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      class: \"timeline-badge danger\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 662,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"i\", {\n      class: \"glyphicon glyphicon-check\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 662,\n        columnNumber: 50\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      class: \"timeline-panel\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 663,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      class: \"timeline-heading\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 664,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      class: \"timeline-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 665,\n        columnNumber: 19\n      }\n    }, \"\\uAD50\\uB3D9\\uBA74\\uC625 \\uBCF5\\uD604\\uC810\")), /*#__PURE__*/React.createElement(\"div\", {\n      class: \"timeline-body\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 667,\n        columnNumber: 17\n      }\n    }))))), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 673,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"a\", {\n      href: \"http://127.0.0.1:8000/api/RoadAPI\",\n      class: \"more\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 674,\n        columnNumber: 13\n      }\n    }, \" more \")))));\n  }\n\n}\n\nexport default UserProfile;","map":{"version":3,"sources":["C:/code/laravel/light-bootstrap-dashboard-react-master/src/views/UserProfile.jsx"],"names":["Card","FormInputs","UserCard","Button","Timeline2","React","Component","Grid","Row","Col","FormGroup","ControlLabel","FormControl","getProfile","update","UserProfile","constructor","state","name","email","address","city","country","birthday","about","errors","onChange","bind","onSubmit","componentDidMount","then","res","window","location","href","setState","user","password","pwconfirm","e","target","value","preventDefault","alert","console","log","props","history","push","more","DrawLine","CNT_BUFF","SPLIT_VALUE","REQ_LIMIT_PER_SEC","map","map2","vectorLayer","vectorLayer2","arrPoint","totDistance","totPointCount","arrMatchedId","currentIndex","startSourceIndex","cntReqApi","lastMatchedLocation","vector_layer","markerLayer","marker","$","initMap","initData","setMapBound","isValidate","setTimeout","splitPoint","length","Tmapv2","Map","width","height","zoomControl","scrollwheel","agent","navigator","userAgent","toLowerCase","cntAllPoint","pointString","arrMatchedPoint","i","j","k","cntPointString","coord","LatLng","circle","Circle","center","radius","fillColor","fillOpacity","strokeColor","strokeWeight","circle2","reqLoadApi","response","matchedId","objNextMatchedLocation","objSourceLocation","lastSourceIndex","arrPointForLine","arrPointForMarker","arrPointForCalDistance","resultData","matchedPoints","objMatchedLocation","matchedLocation","sourceLocation","linkId","idxName","sourceIndex","latitude","longitude","drawLine","calDistance","toFixed","pointList","lineColor","polyline_","Polyline","path","callback","url","ajax","type","contentType","data","async","success","positionBounds","LatLngBounds","boundPosition","extend","panToBounds","msg","html","scrollTop","scrollHeight","lon1","lat1","lon2","lat2","theta","dist","Math","sin","deg2rad","cos","acos","rad2deg","Number","deg","PI","rad","render","str","label","bsClass","placeholder","defaultValue"],"mappings":"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","sourcesContent":["import { Card } from \"components/Card/Card.jsx\";\r\nimport { FormInputs } from \"components/FormInputs/FormInputs.jsx\";\r\nimport { UserCard } from \"components/UserCard/UserCard.jsx\";\r\nimport Button from \"components/CustomButton/CustomButton.jsx\";\r\nimport Timeline2 from \"./Timeline2.jsx\";\r\nimport React, { Component } from \"react\";\r\nimport \"../assets/css/timeline.css\";\r\nimport {\r\n  Grid,\r\n  Row,\r\n  Col,\r\n  FormGroup,\r\n  ControlLabel,\r\n  FormControl\r\n} from \"react-bootstrap\";\r\n\r\n//auth\r\nimport { getProfile } from '../components/Auth/UserFunctions';\r\nimport { update } from '../components/Auth/UserFunctions';\r\n\r\nclass UserProfile extends Component {\r\n  constructor() {\r\n    super()\r\n    this.state = {\r\n        name: '',\r\n        email: '',\r\n        address: '',\r\n        city: '',\r\n        country: '',\r\n        birthday: '',\r\n        about: '',\r\n        errors: {}\r\n    }\r\n    this.onChange = this.onChange.bind(this)\r\n    this.onSubmit = this.onSubmit.bind(this)\r\n}\r\n  componentDidMount() {\r\n    getProfile().then(res => {\r\n        if(res == null) {\r\n          window.location.href = \"/\";\r\n        } else {\r\n            this.setState({\r\n                name: res.user.name,\r\n                email: res.user.email,\r\n                password: this.state.password,\r\n                pwconfirm: this.state.pwconfirm,\r\n                address: res.user.address,\r\n                city: res.user.city,\r\n                country: res.user.country,\r\n                birthday: res.user.birthday,\r\n                about: res.user.about,\r\n            })\r\n        }\r\n    })\r\n  }\r\n\r\n  onChange (e) {\r\n    this.setState({ [e.target.name]: e.target.value })\r\n  }\r\n\r\n  onSubmit (e) {\r\n    e.preventDefault();\r\n    \r\n    //validator\r\n    if(this.state.password != this.state.pwconfirm) {\r\n        alert('비밀번호가 맞지않습니다. 다시 확인하세요');\r\n    } else {\r\n        const user = {\r\n            name: this.state.name,\r\n            email: this.state.email,\r\n            password: this.state.password,\r\n            pwconfirm: this.state.pwconfirm,\r\n            address: this.state.address,\r\n            city: this.state.city,\r\n            country: this.state.country,\r\n            about: this.state.about,\r\n            birthday: this.state.birthday,\r\n        }\r\n      console.log('tetstestes', user);\r\n\r\n      update(user).then(res => {\r\n        if (res) {\r\n            console.log('업데이트 됐나??', res);\r\n            this.props.history.push(`/user`)\r\n        }\r\n      })\r\n    }\r\n  }\r\n\r\n  more(e){\r\n    e.preventDefault();\r\n    var DrawLine = DrawLine || {}; // NameSpace\r\n\t\t\r\n\t\tDrawLine.CNT_BUFF = 1; // 매끄러운 매칭을 위한 버퍼 포인트 개수\r\n\t\tDrawLine.SPLIT_VALUE = 20; // Road API 로 한번에 요청할 포인트 개수. 최대 100개 까지 가능  ex)샘플코드에서는 SPLIT_VALUE 를 10으로 가정했을 때 요청 포인트 개수가 총 25개라면 API 가 3번 호출됨\r\n\t\tDrawLine.REQ_LIMIT_PER_SEC = 1; // API 초당 요청 제한건수\r\n\t\t\r\n\t\tDrawLine.map = null; // 이동한도로찾기 API 사용전 라인 표출할 지도\r\n   \t\tDrawLine.map2 = null; // 이동한도로찾기 API 사용후 라인 표출할 지도\r\n   \t\tDrawLine.vectorLayer = null; // 이동한도로찾기 API 사용전 벡터 레이어\r\n   \t\tDrawLine.vectorLayer2 = null; // 이동한도로찾기 API 사용후 벡터 레이어\r\n\t\tDrawLine.arrPoint = null; // 포인트 배열 (resource)\r\n\t\t\r\n\t\tDrawLine.totDistance = 0; // 매칭된 거리 (단위: m)\r\n\t\tDrawLine.totPointCount = 0; // 매칭된 좌표의 개수 (단위: count)\r\n\t\tDrawLine.arrMatchedId = []; // 매칭된 링크 아이디 (중복제거)\r\n\t\t\r\n\t\tDrawLine.currentIndex = 0;\r\n\t\tDrawLine.startSourceIndex = 0; // 버퍼 포인트(이전 포인트의 일부를 포함하여 요청)를 제외한 실제 포인트 시작 인덱스\r\n\t\t\r\n\t\tDrawLine.cntReqApi  = 0; // API 요청횟수\r\n\t\tDrawLine.lastMatchedLocation = null; // 이전 마지막 포인트를 저장( 이후 포인트와 연결하기 위함 )\r\n\t\t\r\n\t\tDrawLine.vector_layer = null; // 요청 좌표를 표시할 레이어(매칭 전 지도에 표시)\r\n   \t\tDrawLine.markerLayer = null; // 보간점 레이어\r\n   \t\tDrawLine.marker  = null; // 보간점 마커 \r\n\t\t\r\n\t\t/**\r\n\t\t* 문서 로드 완료시 작업\r\n\t\t*/\r\n\t\t$(function(){\r\n\t\t\tDrawLine.initMap(); // 지도 그리기\r\n\t\t\tDrawLine.initData(); // 포인트 데이터 초기화\r\n\t\t\tDrawLine.setMapBound(); // 포인트에 따른 지도 바운드 설정\r\n\t\t\tif( DrawLine.isValidate() ) {\r\n\t\t\t\t// 유효성 검사를 통과 했다면 할 작업\r\n\t\t\t\tDrawLine.log(\"- LoadApi 요청 작업 시작 -\");\r\n\t\t\t\tDrawLine.log('------------------------------------------');\r\n\t\t\t\tsetTimeout(function() { // 지도를 띄우고 API 를 호출하기 위해 딜레이 줌\r\n\t\t\t\t\tDrawLine.splitPoint(); // 포인트 데이터 나눠서 요청하기 ( LoadApi 한번에 요청 가능한 개수 100개 제한 )\r\n\t\t\t\t}, 1000);\r\n\t\t\t}\r\n\t\t});\r\n\t\t\r\n\t\t/**\r\n\t\t* 유효성검사 \r\n\t\t*/\r\n\t\tDrawLine.isValidate = function() {\r\n\t\t\tif( DrawLine.arrPoint.length <= (DrawLine.CNT_BUFF*2) || DrawLine.SPLIT_VALUE <= DrawLine.CNT_BUFF || DrawLine.SPLIT_VALUE > 100 ) {\r\n\t\t\t\talert(\"리소스 포인트 데이터 개수는 버퍼크기 초과여야 하고, \\'DrawLine.SPLIT_VALUE\\' 는 버퍼 크기 초과 100 이하 여야 합니다.\");\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\t\r\n\t\t/**\r\n   \t\t* 지도 초기화\r\n   \t\t*/\r\n   \t\tDrawLine.initMap = function() {\r\n   \t\t\t//이동한도로찾기 API 사용전 지도 생성\r\n   \t\t\tDrawLine.map = new Tmapv2.Map(\"map_div\", {\r\n   \t\t\t\twidth : \"70%\",\r\n   \t\t\t\theight : \"350px\",\r\n   \t\t\t\tzoomControl : true,\r\n   \t\t\t\tscrollwheel : true\r\n   \t\t\t});\r\n   \t\t\t\r\n   \t\t\t//이동한도로찾기 API 사용할 지도 생성\r\n   \t\t\tDrawLine.map2 = new Tmapv2.Map(\"map_div2\", {\r\n   \t\t\t\twidth : \"70%\",\r\n   \t\t\t\theight : \"350px\",\r\n   \t\t\t\tzoomControl : true,\r\n   \t\t\t\tscrollwheel : true\r\n   \t\t\t});\r\n   \t\t\t\r\n   \t\t\tvar agent = navigator.userAgent.toLowerCase();\r\n   \t\t\t\r\n   \t\t}\r\n\t\t\r\n\t\t/**\r\n\t\t* 포인트 개수 나누기 ( LoadApi request limit 100 )\r\n\t\t*/\r\n\t\tDrawLine.splitPoint = function() {\r\n\t\t\tvar cntAllPoint = DrawLine.arrPoint.length; // 포인트 배열 갯수 구하기\r\n\t\t\tvar pointString = \"\"; // LoadApi 에 요청할 포인트 스트링\r\n\t\t\tvar arrMatchedPoint = {}; // response 결과\r\n\t\t\tvar i, j, k, cntPointString = 0;\r\n\t\t\t\r\n\t\t\tfor( i=DrawLine.currentIndex; i < cntAllPoint; i+=2 ) {\r\n\t\t\t\t// 포인트 스트링 만들기\r\n\t\t\t\t// 경도와 위도 사이는 ‘,’ 좌표와 좌표 사이는 ‘|’ 로 구분 지어 요청 합니다.\r\n\t\t\t\tif( pointString != \"\" ) {\r\n\t\t\t\t\tpointString += '|';\r\n\t\t\t\t}\r\n\t\t\t\tpointString += DrawLine.arrPoint[i] + ',' + DrawLine.arrPoint[i+1]; // ex) 127.925710,37.557086|127.954464,37.556542\r\n\t\t\t\tcntPointString++; // 포인트 스트링 개수 카운트\r\n\t\t\t\t\r\n\t\t\t\tvar coord = new Tmapv2.LatLng(DrawLine.arrPoint[i+1], DrawLine.arrPoint[i]);\r\n    \t\t\t\t\r\n   \t\t\t\tvar circle = new Tmapv2.Circle({\t// 원 생성\r\n   \t\t\t\t\tcenter : coord,\r\n   \t\t\t\t\tradius : 20,\r\n   \t\t\t\t\tfillColor : \"#000000\",\r\n   \t\t\t\t\tfillOpacity : 0.2,\r\n   \t\t\t\t\tstrokeColor : \"#000000\",\r\n   \t\t\t\t\tstrokeWeight : 1,\r\n   \t\t\t\t\tmap : DrawLine.map\r\n   \t\t\t\t}); \r\n   \t\t\t\t\r\n   \t\t\t\tvar circle2 = new Tmapv2.Circle({\t// 원 생성2\r\n   \t\t\t\t\tcenter : coord,\r\n   \t\t\t\t\tradius : 20,\r\n   \t\t\t\t\tfillColor : \"#FF0000\",\r\n   \t\t\t\t\tfillOpacity : 0.2,\r\n   \t\t\t\t\tstrokeColor : \"#000000\",\r\n   \t\t\t\t\tstrokeWeight : 1,\r\n   \t\t\t\t\tmap : DrawLine.map2\r\n   \t\t\t\t}); \r\n   \t\t\t\t\r\n\t\t\t\tif( cntPointString == DrawLine.SPLIT_VALUE || (i+2) >= cntAllPoint ) {\r\n\t\t\t\t\t// 포인트 개수가 제한 수에 도달했다면 || 반복문의 마지막 항목 이라면 할 작업 \r\n\t\t\t\t\t\r\n\t\t\t\t\t// 0. LoadApi 요청\r\n\t\t\t\t\tDrawLine.reqLoadApi(pointString, function(response){\r\n\t\t\t\t\t\tDrawLine.cntReqApi++; // API 요청횟수 카운트\r\n\t\t\t\t\t\r\n\t\t\t\t\t\t// LoadApi Response 받은 후 작업\r\n\t\t\t\t\t\tvar matchedId = \"\"; // 매칭된 아이디\r\n\t\t\t\t\t\tvar objNextMatchedLocation = {}; // 바로 직전에 매칭된 좌표\r\n\t\t\t\t\t\tvar objSourceLocation = {}; // 요청한 좌표\r\n\t\t\t\t\t\tvar lastSourceIndex = -1; // 요청 포인트 인덱스 번호\r\n\t\t\t\t\t\tvar arrPointForLine = []; // 선으로 그려질 포인트\r\n\t\t\t\t\t\tvar arrPointForMarker = []; // 마커로 그려질 포인트\r\n\t\t\t\t\t\tvar arrPointForCalDistance = []; // 거리 계산을 위한 포인트\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t// 결과 값이 존재한다면 실행할 작업\r\n\t\t\t\t\t\tif( response && response.resultData.matchedPoints ) {\r\n\t\t\t\t\t\t\tarrMatchedPoint = response.resultData.matchedPoints; // 매칭된 정보 데이터(matchedPoints)를 arrMatchedPoint 배열에 담는다.\r\n\t\t\t\t\t\t\tfor( j=0; j < arrMatchedPoint.length; j++ ) {\r\n\t\t\t\t\t\t\t\tobjMatchedLocation = arrMatchedPoint[j].matchedLocation;\r\n\t\t\t\t\t\t\t\tobjSourceLocation = arrMatchedPoint[j].sourceLocation;\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t// 1. 매칭 아이디 추가 (중복제거)\r\n\t\t\t\t\t\t\t\t//----------------------------------------------------------------\r\n\t\t\t\t\t\t\t\tmatchedId = arrMatchedPoint[j].linkId + \"_\" + arrMatchedPoint[j].idxName;\r\n\t\t\t\t\t\t\t\tfor( k=0; k < DrawLine.arrMatchedId.length; k++ ) {\r\n\t\t\t\t\t\t\t\t\tif( DrawLine.arrMatchedId[k] == matchedId ) {\r\n\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tif( k >= DrawLine.arrMatchedId.length ) {\r\n\t\t\t\t\t\t\t\t\t// 중복된 아이디가 존재하지 않는다면 할 작업\r\n\t\t\t\t\t\t\t\t\tDrawLine.arrMatchedId.push( matchedId ); // 매칭된 아이디 목록에 추가\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t//----------------------------------------------------------------\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tif( arrMatchedPoint[j].sourceIndex >= 0 ) {\r\n\t\t\t\t\t\t\t\t\t// sourceIndex 가 존재한다면 마지막 sourceIndex 갱신\r\n\t\t\t\t\t\t\t\t\tlastSourceIndex = arrMatchedPoint[j].sourceIndex;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t// 2-1. 라인으로 그려질 소스 포인트 리스트 만들기\r\n\t\t\t\t\t\t\t\tif( objSourceLocation ) {\r\n\t\t\t\t\t\t\t\t\tarrPointForMarker.push(new Tmapv2.LatLng(objSourceLocation.latitude, objSourceLocation.longitude)); // 좌표변환\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t// 3-1. 라인으로 그려질 매칭 포인트 리스트 만들기\r\n\t\t\t\t\t\t\t\t// 한번에 모든 좌표를 요청하면 문제가 없겠지만 100개 이상의 좌표를 여러번 나눠서 요청해야할 경우 요청과 요청 사이의 매칭된 링크가 어긋날 수 있다.\r\n\t\t\t\t\t\t\t\t// 이를 보정하기 위해 이전 요청 좌표의 일부(버퍼)를 함깨 요청하고 매 요청의 곂치는 부분의 결과를 (버퍼사이즈/2 만큼)덜 그림으로써 좀더 매끄러운 결과를 얻을 수 있다.\r\n\t\t\t\t\t\t\t\tif( arrPointForLine.length == 0 && DrawLine.lastMatchedLocation ) {\r\n\t\t\t\t\t\t\t\t\t// 이전 요청의 마지막 매칭좌표가 존재한다면 현재 매칭 좌표라인의 맨 앞에 추가 ( 이전 요청 라인과 이어지게 하기 위함 )\r\n\t\t\t\t\t\t\t\t\tarrPointForLine.push(new Tmapv2.LatLng(DrawLine.lastMatchedLocation.latitude, DrawLine.lastMatchedLocation.longitude)); // 좌표변환\r\n\t\t\t\t\t\t\t\t\tarrPointForCalDistance.push( DrawLine.lastMatchedLocation ); // 거리 계산을 위해 저장\r\n\t\t\t\t\t\t\t\t\tDrawLine.lastMatchedLocation = null;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tif( cntAllPoint/2 <= DrawLine.SPLIT_VALUE ) {\r\n\t\t\t\t\t\t\t\t\t// 1) 처음이자 마지막 요청이라면(전체 요청 좌표개수가 분할요청 기준보다 적다면) => 매칭된 좌표를 모두 라인으로 그림\r\n\t\t\t\t\t\t\t\t\tif( objMatchedLocation ) {\r\n\t\t\t\t\t\t\t\t\t\tarrPointForLine.push(new Tmapv2.LatLng(objMatchedLocation.latitude, objMatchedLocation.longitude)); // 좌표변환\r\n\t\t\t\t\t\t\t\t\t\tarrPointForCalDistance.push( objMatchedLocation ); // 거리 계산을 위해 저장\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\telse if( DrawLine.cntReqApi == 1 ) {\r\n\t\t\t\t\t\t\t\t\t// 2) 처음 요청이면서 이후에 요청이 있을 예정이라면 => 뒤쪽좌표 중 버퍼의 절반 만큼 그리지 않음\r\n\t\t\t\t\t\t\t\t\tif( objMatchedLocation && lastSourceIndex < (cntPointString-(DrawLine.CNT_BUFF/2)) ) {\r\n\t\t\t\t\t\t\t\t\t\tarrPointForLine.push(new Tmapv2.LatLng(objMatchedLocation.latitude, objMatchedLocation.longitude)); // 좌표변환\r\n\t\t\t\t\t\t\t\t\t\tDrawLine.lastMatchedLocation = objMatchedLocation; // 이후 API 요청결과와 라인을 이어가기 위해 마지막 포인트 저장\r\n\t\t\t\t\t\t\t\t\t\tarrPointForCalDistance.push( objMatchedLocation ); // 거리 계산을 위해 저장\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\telse if( DrawLine.cntReqApi > 1 && (i+2) >= cntAllPoint ) {\r\n\t\t\t\t\t\t\t\t\t// 3) 처음이 아니면서 마지막 API 요청이라면 => 앞쪽좌표 중 버퍼의 절반 만큼 그리지 않음\r\n\t\t\t\t\t\t\t\t\tif( objMatchedLocation && lastSourceIndex >= (DrawLine.CNT_BUFF/2) ) {\r\n\t\t\t\t\t\t\t\t\t\tarrPointForLine.push(new Tmapv2.LatLng(objMatchedLocation.latitude, objMatchedLocation.longitude)); // 좌표변환\r\n\t\t\t\t\t\t\t\t\t\tDrawLine.lastMatchedLocation = objMatchedLocation; // 이후 API 요청결과와 라인을 이어가기 위해 마지막 포인트 저장\r\n\t\t\t\t\t\t\t\t\t\tarrPointForCalDistance.push( objMatchedLocation ); // 거리 계산을 위해 저장\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\telse if( DrawLine.cntReqApi > 1 ) {\r\n\t\t\t\t\t\t\t\t\t// 4) 처음이 아니면서 이후에 API 요청이 있을 예정이라면 => 앞쪽좌표 중 버퍼의 절반, 뒤쪽좌표 중 버퍼의 절반 만큼 그리지 않음\r\n\t\t\t\t\t\t\t\t\tif( objMatchedLocation && lastSourceIndex >= (DrawLine.CNT_BUFF/2) && lastSourceIndex < (cntPointString-(DrawLine.CNT_BUFF/2)) ) {\r\n\t\t\t\t\t\t\t\t\t\tarrPointForLine.push(new Tmapv2.LatLng(objMatchedLocation.latitude, objMatchedLocation.longitude)); // 좌표변환\r\n\t\t\t\t\t\t\t\t\t\tDrawLine.lastMatchedLocation = objMatchedLocation; // 이후 API 요청결과와 라인을 이어가기 위해 마지막 포인트 저장\r\n\t\t\t\t\t\t\t\t\t\tarrPointForCalDistance.push( objMatchedLocation ); // 거리 계산을 위해 저장\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t// 2-2. 소스 포인트 리스트로 라인 그리기\r\n\t\t\t\t\t\t\t// 요청한 좌표를 사용해 라인을 그려줍니다.(빨간색)\r\n\t\t\t\t\t\t\tDrawLine.drawLine( arrPointForMarker, \"#FF0000\" );\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t// 3-2. 매칭 포인트 리스트로 라인 그리기\r\n\t\t\t\t\t\t\t// 요청한 좌표와 매칭되는 좌표를 사용해 라인을 그려줍니다.(파랑색)\r\n\t\t\t\t\t\t\tDrawLine.drawLine( arrPointForLine, \"#0000FF\" );\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t// 4. 매칭된 좌표의 거리 구하기\r\n\t\t\t\t\t\t\tfor( k=0; k<(arrPointForCalDistance.length-1); k++ ) {\r\n\t\t\t\t\t\t\t\tDrawLine.totDistance += DrawLine.calDistance(arrPointForCalDistance[k].longitude, arrPointForCalDistance[k].latitude, arrPointForCalDistance[k+1].longitude, arrPointForCalDistance[k+1].latitude);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t// 5. 매칭된 좌표의 개수 구하기\r\n\t\t\t\t\t\t\tDrawLine.totPointCount += arrPointForCalDistance.length;\r\n\t\t\t\t\t\t\tif( DrawLine.cntReqApi > 1 && arrPointForCalDistance.length >= 1 ) {\r\n\t\t\t\t\t\t\t\t// 첫 요청이 아니면서(앞서 요청한 API 의 마지막 좌표가 포함되어 있으면서), 매칭된 포인트가 1개 이상이라면  카운트 1개 뺌\r\n\t\t\t\t\t\t\t\tDrawLine.totPointCount--;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t// 거리 계산용 포인트 리스트 초기화\r\n\t\t\t\t\t\t\tarrPointForCalDistance = [];\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t\t\r\n\t\t\t\t\tif( (i+2) < cntAllPoint ) {\r\n\t\t\t\t\t\t// 마지막 항목이 아니라면 버퍼 포인트 추가\r\n\t\t\t\t\t\tpointString = \"\"; // LoadAPI 의 파라미터 초기화\r\n\t\t\t\t\t\tcntPointString = 0; // 포인트 스트링 개수 초기화(LoadAPI 에 포인트 분할 요청을 위한 카운트)\r\n\t\t\t\t\t\ti -= (DrawLine.CNT_BUFF*2); // 매끄러운 링크 매칭을 위해 이전 일부 포인트를 포함한 매칭을 한다. (매칭 버퍼)\r\n\t\t\t\t\t\tDrawLine.startSourceIndex = DrawLine.CNT_BUFF; // 매칭 버퍼 포인트를 제외하고 매칭 좌표 수를 카운트 하기 위한 변수\r\n\t\t\t\t\t}\r\n\t\t\t\t\tDrawLine.currentIndex = i;\r\n\t\t\t\t\t\r\n\t\t\t\t\tDrawLine.log(\"총 거리 : \" + DrawLine.totDistance.toFixed(2) + \"m\");\r\n\t\t\t\t\tDrawLine.log(\"매칭된 링크의 개수 : \" + DrawLine.arrMatchedId.length + \"개\");\r\n\t\t\t\t\tDrawLine.log(\"총 좌표의 개수 : \" + DrawLine.totPointCount + \"개\");\r\n\t\t\t\t\tDrawLine.log('------------------------------------------');\r\n\t\t\t\t\t\r\n\t\t\t\t\t// 중간 진행과정을 화면에 표출하기 위한 작업\r\n\t\t\t\t\tif( (i+2) < cntAllPoint ) {\r\n\t\t\t\t\t\tDrawLine.currentIndex += 2; // 포인트 이동\r\n\t\t\t\t\t\tsetTimeout( DrawLine.splitPoint, (1000/DrawLine.REQ_LIMIT_PER_SEC) ); // 재귀호출\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tDrawLine.log(\"- LoadApi 요청 작업 완료 -\");\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\t/**\r\n   \t\t* 라인 그리기\r\n   \t\t*/\r\n   \t\tDrawLine.drawLine = function( pointList, lineColor ) {\r\n   \t\t\tvar polyline_;\r\n   \t\t\t\r\n   \t\t\tif(lineColor == \"#FF0000\"){\r\n   \t\t\t\tpolyline_ = new Tmapv2.Polyline({\r\n   \t\t\t\t\tpath : pointList,\r\n   \t\t\t\t\tstrokeColor : lineColor,\r\n   \t\t\t\t\tstrokeWeight: 6,\r\n   \t\t\t\t\tmap : DrawLine.map\r\n   \t\t\t\t});\r\n   \t\t\t}else{\r\n\t   \t\t\t\t// 지도상에 그려질 스타일을 설정합니다.\r\n   \t\t\t\tpolyline_ = new Tmapv2.Polyline({\r\n   \t\t\t\t\tpath : pointList,\r\n   \t\t\t\t\tstrokeColor : lineColor,\r\n   \t\t\t\t\tstrokeWeight: 6,\r\n   \t\t\t\t\tmap : DrawLine.map2\r\n   \t\t\t\t});\r\n   \t\t\t}\r\n   \t\t}\r\n\t\t\r\n\t\t/**\r\n   \t\t* 로드 매칭 API 요청\r\n   \t\t*/\r\n   \t\tDrawLine.reqLoadApi = function( pointString, callback ) {\r\n   \t\t\tvar url = 'https://apis.openapi.sk.com/tmap/road/matchToRoads?version=1&appKey=l7xx49ec35203c51459ab998a98895d8d47c'; // 이동한 도로 찾기 api 요청 url입니다.\r\n   \t\t\t\r\n   \t\t\t$.ajax({\r\n   \t\t\t     type: 'POST',\r\n\t\t\t  \t contentType: \"application/x-www-form-urlencoded\",\r\n   \t\t\t     url: url,\r\n   \t\t\t     data: {\r\n\t\t    \t\t\t\"responseType\" : \"1\", // 1:전체 데이터 요청, 2:요청좌표 및 매치된 좌표를 제외한 데이터 요청\r\n\t\t    \t\t\t \"coords\" : pointString // 좌표계는 WGS84GEO, 매핑에 사용될 좌표 목록입니다.  경도와 위도 사이는 \",\" 좌표와 좌표 사이에는 \"|\"로 구분지어 요청합니다. \r\n\t\t\t  \t\t\t},\r\n   \t\t\t     async: false,\r\n   \t\t\t     success: function(data) {\r\n   \t\t\t  \t   callback(data);\r\n   \t\t\t     }\r\n   \t\t\t});\r\n   \t\t}\r\n\t\t\r\n\t\t/**\r\n\t\t* 좌표가 한눈에 들어오는 바운드 찾기\r\n\t\t*/\r\n\t\tDrawLine.setMapBound = function() {\r\n\t\t\tvar positionBounds = new Tmapv2.LatLngBounds(); // bounds 인스턴스를 생성합니다.\r\n\t\t\tvar i;\r\n\t\t\t\r\n\t\t\tfor( i=0; i < DrawLine.arrPoint.length; i+=2 ) {  // 포인트 배열 (resource)의 길이만큼 반복\r\n\t\t\t\t// 좌표변환 후 bounds 확장\r\n\t\t\t\tvar boundPosition = new Tmapv2.LatLng(DrawLine.arrPoint[i+1], DrawLine.arrPoint[i]);\r\n    \t\t\tpositionBounds.extend(boundPosition);\r\n\t\t\t}\r\n\t\t\tDrawLine.map.panToBounds(positionBounds); // 매칭전 좌표가 한눈에 들어올 수 있는 지도 중심과 줌레벨 설정\r\n   \t\t\tDrawLine.map2.panToBounds(positionBounds); // 매칭후 좌표가 한눈에 들어올 수 있는 지도 중심과 줌레벨 설정\r\n\t\t}\r\n\t\t\r\n\t\t/**\r\n\t\t* 로그 표시\r\n\t\t*/\r\n\t\tDrawLine.log = function( msg ) {\r\n\t\t\t$('#divResult').html( $('#divResult').html() + msg + \"<br/>\" );\r\n\t\t\t$(\"#divResult\").scrollTop($(\"#divResult\")[0].scrollHeight); // 스크롤 맨 아래로 이동\r\n\t\t}\r\n\t\t\r\n\t\t/**\r\n\t\t* 위경도로 거리 구하기\r\n\t\t*/\r\n\t\tDrawLine.calDistance = function( lon1, lat1, lon2, lat2 ){\r\n\t\t    var theta, dist;\r\n\t\t    \r\n\t\t    if( lon1 == lon2 && lat1 == lat2 )\r\n\t\t    \treturn 0;\r\n\t\t    \r\n\t\t    theta = lon1 - lon2;\r\n\t\t    dist = Math.sin(DrawLine.deg2rad(lat1)) * Math.sin(DrawLine.deg2rad(lat2)) + Math.cos(DrawLine.deg2rad(lat1))\r\n\t\t          * Math.cos(DrawLine.deg2rad(lat2)) * Math.cos(DrawLine.deg2rad(theta));\r\n\t\t    dist = Math.acos(dist);\r\n\t\t    dist = DrawLine.rad2deg(dist);\r\n\t\t    \r\n\t\t    dist = dist * 60 * 1.1515;\r\n\t\t    dist = dist * 1.609344; // 단위 mile 에서 km 변환\r\n\t\t    dist = dist * 1000.0; // 단위  km 에서 m 로 변환\r\n\t\t    \r\n\t\t    return Number(Number(dist).toFixed(2));\r\n\t\t}\r\n\t\t\r\n\t\t/**\r\n\t\t* 주어진 도(degree) 값을 라디언으로 변환\r\n\t\t*/\r\n\t\tDrawLine.deg2rad = function( deg ){\r\n\t\t    return (deg * Math.PI / 180);  \r\n\t\t}  \r\n\t\t\r\n\t\t/**\r\n\t\t* 주어진 라디언(radian) 값을 도(degree) 값으로 변환\r\n\t\t*/\r\n\t\tDrawLine.rad2deg = function( rad ){  \r\n\t\t    return (rad * 180 / Math.PI);  \r\n\t\t} \r\n\t\t \r\n\t\t/*\r\n\t\t* 이동한도로찾기 요청시 1회 좌표 100개까지 지원가능합니다. \r\n   \t\t*/\r\n   \t\t/*포인트 배열 초기화*/\r\n   \t\tDrawLine.initData = function() {\r\n   \t\t\tDrawLine.arrPoint = [\r\n               128.62097089126576,35.89315725638313,\r\n                128.6221513571504,35.892643447504284,\r\n                128.62245966742682,35.89249624765208,\r\n                128.6232068338938,35.89213519124339\r\n   \t\t\t];\r\n   \t\t}\r\n  }\r\n\r\n  render() {\r\n    let str = this.state.name;\r\n    return (\r\n      <div className=\"content\">\r\n        <Grid fluid>\r\n          <Row>\r\n            <Col md={8}>\r\n              <Card\r\n                title=\"Edit Profile\"\r\n                content={\r\n                  <form onSubmit={this.onSubmit}>\r\n\r\n                    <FormInputs\r\n                      ncols={[\"col-md-5\", \"col-md-7\"]}\r\n                      properties={[\r\n                        {\r\n                          label: \"Username\",\r\n                          type: \"text\",\r\n                          bsClass: \"form-control\",\r\n                          placeholder: \"Username\",\r\n                          defaultValue: this.state.name,\r\n                          onChange: this.onChange\r\n                        },\r\n                        {\r\n                          label: \"Email address\",\r\n                          type: \"email\",\r\n                          bsClass: \"form-control\",\r\n                          placeholder: \"email\",\r\n                          defaultValue: this.state.email,\r\n                          onChange: this.onChange\r\n                          \r\n                        }\r\n                      ]}\r\n                    />\r\n                    <FormInputs\r\n                            ncols={[\"col-md-6\", \"col-md-6\"]}\r\n                            properties={[\r\n                                {\r\n                                label: \"Password\",\r\n                                type: \"password\",\r\n                                name: \"password\",\r\n                                bsClass: \"form-control\",\r\n                                placeholder: \"Password\",\r\n                                value: this.state.password,\r\n                                onChange: this.onChange\r\n                                },\r\n                                {\r\n                                label: \"Password confirm\",\r\n                                type: \"password\",\r\n                                name: \"pwconfirm\",\r\n                                bsClass: \"form-control\",\r\n                                placeholder: \"Password confirm\",\r\n                                value: this.state.pwconfirm,\r\n                                onChange: this.onChange\r\n                                }\r\n                            ]}\r\n                            />\r\n\r\n                    <FormInputs\r\n                      ncols={[\"col-md-12\"]}\r\n                      properties={[\r\n                        {\r\n                          label: \"address\",\r\n                          type: \"text\",\r\n                          bsClass: \"form-control\",\r\n                          placeholder: \"Home address\",\r\n                          defaultValue: this.state.address,\r\n                          onChange: this.onChange\r\n                        }\r\n                      ]}\r\n                    />\r\n                    <FormInputs\r\n                      ncols={[\"col-md-6\", \"col-md-6\"]}\r\n                      properties={[\r\n                        {\r\n                          label: \"City\",\r\n                          type: \"text\",\r\n                          bsClass: \"form-control\",\r\n                          placeholder: \"City\",\r\n                          defaultValue: this.state.city,\r\n                          onChange: this.onChange\r\n                        },\r\n                        {\r\n                          label: \"Country\",\r\n                          type: \"text\",\r\n                          bsClass: \"form-control\",\r\n                          placeholder: \"Country\",\r\n                          defaultValue: this.state.country,\r\n                          onChange: this.onChange\r\n                        },\r\n                      ]}\r\n                    />\r\n                    <FormInputs\r\n                    ncols={[\"col-md-8\"]}\r\n                    properties={[\r\n                      {\r\n                        label: \"Birthday\",\r\n                        type: \"date\",\r\n                        bsClass: \"form-control\",\r\n                        placeholder: \"Country\",\r\n                        defaultValue: this.state.birthday,\r\n                        onChange: this.onChange\r\n                      },\r\n                    ]}\r\n                  />\r\n                    <Row>\r\n                      <Col md={12}>\r\n                        <FormGroup controlId=\"formControlsTextarea\">\r\n                          <ControlLabel>About Me</ControlLabel>\r\n                          <FormControl\r\n                            rows=\"5\"\r\n                            componentClass=\"textarea\"\r\n                            bsClass=\"form-control\"\r\n                            placeholder=\"Here can be your description\"\r\n                            value={this.state.about}\r\n                            onChange={this.onChange}\r\n                          />\r\n                        </FormGroup>\r\n                      </Col>\r\n                    </Row>\r\n                    <Button bsStyle=\"info\" pullRight fill type=\"submit\">\r\n                      Update Profile\r\n                    </Button>\r\n                    <div className=\"clearfix\" />\r\n                  </form>\r\n                }\r\n              />\r\n            </Col>\r\n            <Col md={4}>\r\n              <UserCard\r\n                bgImage=\"https://ununsplash.imgix.net/photo-1431578500526-4d9613015464?fit=crop&fm=jpg&h=300&q=75&w=400\"\r\n                avatar=\"https://t1.daumcdn.net/cfile/tistory/243FE450575F82662D\"\r\n                name={this.state.name}\r\n                userName={this.state.email}\r\n                description={\r\n                  <span>\r\n                    <br />\r\n                    {this.state.about}\r\n                  </span>\r\n                }\r\n                socials={\r\n                  <div>\r\n                    <Button simple>\r\n                      Timeline\r\n                    </Button>\r\n                  </div>\r\n                }\r\n              />\r\n            </Col>\r\n            {/* <Col md={4}>\r\n              <Timeline2 />\r\n            </Col> */}\r\n          </Row>\r\n        </Grid>\r\n        <hr/>\r\n        <div class=\"row\">\r\n        <div class=\"col-md-12\">\r\n          <div class=\"page-header\">\r\n            <h2>timeline</h2>\r\n          </div>\r\n          <div>\r\n          <ul class=\"timeline timeline-horizontal\">\r\n            <li class=\"timeline-item\">\r\n              <div class=\"timeline-badge primary\"><i class=\"glyphicon glyphicon-check\"></i></div>\r\n              <div class=\"timeline-panel\">\r\n                <div class=\"timeline-heading\">\r\n                  <h4 class=\"timeline-title\">청담면옥 복현점</h4>\r\n                </div>\r\n                <div class=\"timeline-body\">\r\n                </div>\r\n              </div>\r\n            </li>\r\n            <li class=\"timeline-item\">\r\n              <div class=\"timeline-badge success\"><i class=\"glyphicon glyphicon-check\"></i></div>\r\n              <div class=\"timeline-panel\">\r\n                <div class=\"timeline-heading\">\r\n                  <h4 class=\"timeline-title\">한올미용실</h4>\r\n                </div>\r\n                <div class=\"timeline-body\">\r\n                </div>\r\n              </div>\r\n            </li>\r\n            <li class=\"timeline-item\">\r\n              <div class=\"timeline-badge info\"><i class=\"glyphicon glyphicon-check\"></i></div>\r\n              <div class=\"timeline-panel\">\r\n                <div class=\"timeline-heading\">\r\n                  <h4 class=\"timeline-title\">훼미리마트 복현슬기점</h4>\r\n                </div>\r\n                <div class=\"timeline-body\">\r\n                </div>\r\n              </div>\r\n            </li>\r\n            <li class=\"timeline-item\">\r\n              <div class=\"timeline-badge danger\"><i class=\"glyphicon glyphicon-check\"></i></div>\r\n              <div class=\"timeline-panel\">\r\n                <div class=\"timeline-heading\">\r\n                  <h4 class=\"timeline-title\">교동면옥 복현점</h4>\r\n                </div>\r\n                <div class=\"timeline-body\">\r\n                </div>\r\n              </div>\r\n            </li>\r\n          </ul>\r\n          </div>\r\n          <div>\r\n            <a href=\"http://127.0.0.1:8000/api/RoadAPI\" class=\"more\"> more </a>\r\n          </div>\r\n        </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nexport default UserProfile;\r\n"]},"metadata":{},"sourceType":"module"}